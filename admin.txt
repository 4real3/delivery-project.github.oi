<!DOCTYPE html>
<html lang="uk">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Адмін-панель</title>
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <style>
    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: 'Inter', sans-serif;
      background-color: #f9fafb;
      color: #1e293b;
      line-height: 1.6;
    }

    .btn {
      padding: 1rem 2rem;
      border-radius: 3rem;
      font-weight: 600;
      color: white;
      border: none;
      cursor: pointer;
      transition: transform 0.3s ease, box-shadow 0.3s ease, background 0.3s ease;
      position: relative;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
      text-transform: uppercase;
      letter-spacing: 1px;
    }

    .btn::before {
      content: '';
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.3), transparent);
      transition: 0.5s;
    }

    .btn:hover::before {
      left: 100%;
    }

    .btn:hover {
      transform: translateY(-3px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.3);
    }

    .btn-primary {
      background: linear-gradient(135deg, #3b82f6, #2563eb);
    }

    .btn-primary:hover {
      background: linear-gradient(135deg, #2563eb, #1d4ed8);
    }

    .btn-courier {
      background: linear-gradient(135deg, #10b981, #059669);
    }

    .btn-courier:hover {
      background: linear-gradient(135deg, #059669, #047857);
    }

    .btn-delete {
      background: linear-gradient(135deg, #ef4444, #dc2626);
    }

    .btn-delete:hover {
      background: linear-gradient(135deg, #dc2626, #b91c1c);
    }

    .btn-back {
      background: linear-gradient(135deg, #6b7280, #4b5563);
      display: flex;
      align-items: center;
      gap: 0.5rem;
      padding: 0.75rem 1.5rem;
      border-radius: 2rem;
      box-shadow: 0 3px 10px rgba(0, 0, 0, 0.15);
    }

    .btn-back:hover {
      background: linear-gradient(135deg, #4b5563, #374151);
    }

    .admin-container {
      padding: 3rem 1.5rem;
      max-width: 1300px;
      margin: 0 auto;
      background: #f9fafb;
    }

    .section-title {
      font-size: 2.5rem;
      font-weight: 800;
      margin-bottom: 2rem;
      background: linear-gradient(to right, #3b82f6, #ec4899);
      -webkit-background-clip: text;
      -webkit-text-fill-color: transparent;
    }

    .admin-section {
      margin-bottom: 4rem;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 2rem;
      margin-bottom: 3rem;
    }

    .stat-card {
      background: linear-gradient(145deg, #ffffff, #f1f5f9);
      padding: 2rem;
      border-radius: 1.5rem;
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
      text-align: center;
      transition: transform 0.4s ease, box-shadow 0.4s ease;
    }

    .stat-card:hover {
      transform: translateY(-10px);
      box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
    }

    .stat-value {
      font-size: 2.5rem;
      font-weight: 700;
      color: #1e293b;
      margin-bottom: 0.5rem;
    }

    .stat-label {
      font-size: 1.1rem;
      color: #64748b;
    }

    .admin-grid {
      display: grid;
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    @media (min-width: 768px) {
      .admin-grid {
        grid-template-columns: repeat(2, 1fr);
      }
    }

    @media (min-width: 1024px) {
      .admin-grid {
        grid-template-columns: repeat(3, 1fr);
      }
    }

    .admin-card {
      background: linear-gradient(145deg, #ffffff, #f1f5f9);
      padding: 2rem;
      border-radius: 1.5rem;
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
      transition: transform 0.4s ease, box-shadow 0.4s ease;
    }

    .admin-card:hover {
      transform: translateY(-10px);
      box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
    }

    .card-title {
      font-size: 1.75rem;
      font-weight: 700;
      margin-bottom: 1.5rem;
      color: #1e293b;
    }

    .card-subtitle {
      font-size: 1.25rem;
      font-weight: 600;
      margin-bottom: 0.75rem;
      color: #1e293b;
    }

    .card-text {
      color: #64748b;
      margin-bottom: 1rem;
    }

    .card-actions {
      display: flex;
      gap: 1rem;
      justify-content: flex-end;
    }

    .order-list {
      margin-top: 3rem;
    }

    .orders {
      display: flex;
      flex-direction: column;
      gap: 2rem;
    }

    .order-item {
      background: linear-gradient(145deg, #ffffff, #f1f5f9);
      padding: 2rem;
      border-radius: 1.5rem;
      box-shadow: 0 8px 20px rgba(0, 0, 0, 0.08);
      display: flex;
      justify-content: space-between;
      align-items: center;
      transition: transform 0.4s ease, box-shadow 0.4s ease;
    }

    .order-item:hover {
      transform: translateY(-10px);
      box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
    }

    .order-title {
      font-size: 1.5rem;
      font-weight: 700;
      color: #1e293b;
    }

    .order-details {
      color: #475569;
      margin: 0.75rem 0;
    }

    .order-status {
      color: #64748b;
      font-weight: 500;
    }

    .modal {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1000;
    }

    .modal-content {
      background: #ffffff;
      padding: 2rem;
      border-radius: 1.5rem;
      width: 100%;
      max-width: 500px;
      box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
      animation: fadeIn 0.3s ease;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: scale(0.95); }
      to { opacity: 1; transform: scale(1); }
    }

    .modal-title {
      font-size: 1.75rem;
      font-weight: 700;
      margin-bottom: 1.5rem;
      color: #1e293b;
    }

    .input-field {
      width: 100%;
      padding: 1rem;
      margin-bottom: 1.5rem;
      border: 1px solid #d1d5db;
      border-radius: 0.75rem;
      font-size: 1rem;
      transition: border-color 0.3s ease, box-shadow 0.3s ease;
      background: #f9fafb;
    }

    .input-field:focus {
      outline: none;
      border-color: #3b82f6;
      box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.2);
    }

    .modal-actions {
      display: flex;
      gap: 1rem;
      justify-content: flex-end;
    }
  </style>
</head>
<body>
  <div id="root"></div>
  <script src="https://cdn.jsdelivr.net/npm/react@18.2.0/umd/react.development.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/react-dom@18.2.0/umd/react-dom.development.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@babel/standalone@7.22.9/babel.min.js"></script>
  <script type="text/babel">
    const { useState, useEffect } = React;

    const AdminPanel = () => {
      const [isLoggedIn, setIsLoggedIn] = useState(false);
      const [restaurants, setRestaurants] = useState([
        { id: 1, name: 'Піцерія Венеція', city: 'Київ' },
        { id: 2, name: 'Суші-бар Токіо', city: 'Львів' },
      ]);
      const [couriers, setCouriers] = useState([
        { id: 1, name: 'Іван Петренко', status: 'Активний' },
        { id: 2, name: 'Марія Коваль', status: 'Офлайн' },
      ]);
      const [orders, setOrders] = useState([
        { id: 1, restaurant: 'Піцерія Венеція', address: 'вул. Шевченка, 10', time: '14:30', amount: 250, status: 'Доставлено' },
        { id: 2, restaurant: 'Суші-бар Токіо', address: 'вул. Франка, 5', time: '15:00', amount: 400, status: 'В дорозі' },
      ]);
      const [editRestaurant, setEditRestaurant] = useState(null);
      const [editCourier, setEditCourier] = useState(null);
      const [newRestaurant, setNewRestaurant] = useState({ name: '', city: '' });
      const [newCourier, setNewCourier] = useState({ name: '', status: 'Активний' });

      useEffect(() => {
        const loggedIn = localStorage.getItem('isLoggedIn') === 'true';
        if (!loggedIn) {
          window.location.href = 'index.html';
        } else {
          setIsLoggedIn(true);
        }
      }, []);

      const handleLogout = () => {
        localStorage.removeItem('isLoggedIn');
        window.location.href = 'index.html';
      };

      const handleEditRestaurant = (restaurant) => {
        setEditRestaurant(restaurant);
      };

      const handleEditCourier = (courier) => {
        setEditCourier(courier);
      };

      const saveRestaurant = () => {
        setRestaurants(
          restaurants.map((r) =>
            r.id === editRestaurant.id ? editRestaurant : r
          )
        );
        setEditRestaurant(null);
      };

      const saveCourier = () => {
        setCouriers(
          couriers.map((c) =>
            c.id === editCourier.id ? editCourier : c
          )
        );
        setEditCourier(null);
      };

      const deleteRestaurant = (id) => {
        setRestaurants(restaurants.filter((r) => r.id !== id));
      };

      const deleteCourier = (id) => {
        setCouriers(couriers.filter((c) => c.id !== id));
      };

      const addRestaurant = () => {
        if (newRestaurant.name && newRestaurant.city) {
          setRestaurants([...restaurants, { ...newRestaurant, id: Date.now() }]);
          setNewRestaurant({ name: '', city: '' });
        } else {
          alert('Заповніть усі поля');
        }
      };

      const addCourier = () => {
        if (newCourier.name) {
          setCouriers([...couriers, { ...newCourier, id: Date.now() }]);
          setNewCourier({ name: '', status: 'Активний' });
        } else {
          alert('Введіть ім’я кур’єра');
        }
      };

      if (!isLoggedIn) {
        return null;
      }

      return (
        <div className="admin-container">
          <button
            onClick={handleLogout}
            className="btn btn-back"
          >
            ← Вийти
          </button>
          <h1 className="section-title">Адмін-панель</h1>

          {/* Статистика */}
          <div className="admin-section">
            <h2 className="card-title">Статистика</h2>
            <div className="stats-grid">
              <div className="stat-card">
                <div className="stat-value">{orders.length}</div>
                <div className="stat-label">Замовлення</div>
              </div>
              <div className="stat-card">
                <div className="stat-value">{couriers.filter(c => c.status === 'Активний').length}</div>
                <div className="stat-label">Активні кур’єри</div>
              </div>
              <div className="stat-card">
                <div className="stat-value">{restaurants.length}</div>
                <div className="stat-label">Ресторани</div>
              </div>
            </div>
          </div>

          {/* Ресторани */}
          <div className="admin-section">
            <h2 className="card-title">Ресторани</h2>
            <div className="admin-grid">
              {restaurants.map((restaurant) => (
                <div key={restaurant.id} className="admin-card">
                  <h3 className="card-subtitle">{restaurant.name}</h3>
                  <p className="card-text">Місто: {restaurant.city}</p>
                  <div className="card-actions">
                    <button
                      onClick={() => handleEditRestaurant(restaurant)}
                      className="btn btn-primary"
                    >
                      Редагувати
                    </button>
                    <button
                      onClick={() => deleteRestaurant(restaurant.id)}
                      className="btn btn-delete"
                    >
                      Видалити
                    </button>
                  </div>
                </div>
              ))}
              <div className="admin-card">
                <h3 className="card-subtitle">Додати ресторан</h3>
                <input
                  type="text"
                  placeholder="Назва ресторану"
                  value={newRestaurant.name}
                  onChange={(e) => setNewRestaurant({ ...newRestaurant, name: e.target.value })}
                  className="input-field"
                />
                <input
                  type="text"
                  placeholder="Місто"
                  value={newRestaurant.city}
                  onChange={(e) => setNewRestaurant({ ...newRestaurant, city: e.target.value })}
                  className="input-field"
                />
                <button
                  onClick={addRestaurant}
                  className="btn btn-primary"
                >
                  Додати
                </button>
              </div>
            </div>
          </div>

          {/* Кур’єри */}
          <div className="admin-section">
            <h2 className="card-title">Кур’єри</h2>
            <div className="admin-grid">
              {couriers.map((courier) => (
                <div key={courier.id} className="admin-card">
                  <h3 className="card-subtitle">{courier.name}</h3>
                  <p className="card-text">Статус: {courier.status}</p>
                  <div className="card-actions">
                    <button
                      onClick={() => handleEditCourier(courier)}
                      className="btn btn-courier"
                    >
                      Редагувати
                    </button>
                    <button
                      onClick={() => deleteCourier(courier.id)}
                      className="btn btn-delete"
                    >
                      Видалити
                    </button>
                  </div>
                </div>
              ))}
              <div className="admin-card">
                <h3 className="card-subtitle">Додати кур’єра</h3>
                <input
                  type="text"
                  placeholder="Ім’я кур’єра"
                  value={newCourier.name}
                  onChange={(e) => setNewCourier({ ...newCourier, name: e.target.value })}
                  className="input-field"
                />
                <select
                  value={newCourier.status}
                  onChange={(e) => setNewCourier({ ...newCourier, status: e.target.value })}
                  className="input-field"
                >
                  <option value="Активний">Активний</option>
                  <option value="Офлайн">Офлайн</option>
                </select>
                <button
                  onClick={addCourier}
                  className="btn btn-courier"
                >
                  Додати
                </button>
              </div>
            </div>
          </div>

          {/* Останні замовлення */}
          <div className="admin-section">
            <h2 className="card-title">Останні замовлення</h2>
            <div className="order-list">
              {orders.length === 0 ? (
                <p className="text-gray-500">Немає замовлень</p>
              ) : (
                <ul className="orders">
                  {orders.map((order) => (
                    <li key={order.id} className="order-item">
                      <div>
                        <h3 className="order-title">{order.restaurant}</h3>
                        <p className="order-details">Адреса: {order.address}</p>
                        <p className="order-details">Час: {order.time}</p>
                        <p className="order-details">Сума: {order.amount} грн</p>
                        <p className="order-status">Статус: {order.status}</p>
                      </div>
                    </li>
                  ))}
                </ul>
              )}
            </div>
          </div>

          {/* Модальне вікно для редагування ресторану */}
          {editRestaurant && (
            <div className="modal">
              <div className="modal-content">
                <h3 className="modal-title">Редагувати ресторан</h3>
                <input
                  type="text"
                  placeholder="Назва ресторану"
                  value={editRestaurant.name}
                  onChange={(e) => setEditRestaurant({ ...editRestaurant, name: e.target.value })}
                  className="input-field"
                />
                <input
                  type="text"
                  placeholder="Місто"
                  value={editRestaurant.city}
                  onChange={(e) => setEditRestaurant({ ...editRestaurant, city: e.target.value })}
                  className="input-field"
                />
                <div className="modal-actions">
                  <button
                    onClick={() => setEditRestaurant(null)}
                    className="btn btn-back"
                  >
                    Скасувати
                  </button>
                  <button
                    onClick={saveRestaurant}
                    className="btn btn-primary"
                  >
                    Зберегти
                  </button>
                </div>
              </div>
            </div>
          )}

          {/* Модальне вікно для редагування кур’єра */}
          {editCourier && (
            <div className="modal">
              <div className="modal-content">
                <h3 className="modal-title">Редагувати кур’єра</h3>
                <input
                  type="text"
                  placeholder="Ім’я кур’єра"
                  value={editCourier.name}
                  onChange={(e) => setEditCourier({ ...editCourier, name: e.target.value })}
                  className="input-field"
                />
                <select
                  value={editCourier.status}
                  onChange={(e) => setEditCourier({ ...editCourier, status: e.target.value })}
                  className="input-field"
                >
                  <option value="Активний">Активний</option>
                  <option value="Офлайн">Офлайн</option>
                </select>
                <div className="modal-actions">
                  <button
                    onClick={() => setEditCourier(null)}
                    className="btn btn-back"
                  >
                    Скасувати
                  </button>
                  <button
                    onClick={saveCourier}
                    className="btn btn-courier"
                  >
                    Зберегти
                  </button>
                </div>
              </div>
            </div>
          )}
        </div>
      );
    };

    const root = ReactDOM.createRoot(document.getElementById('root'));
    root.render(<AdminPanel />);
  </script>
</body>
</html>